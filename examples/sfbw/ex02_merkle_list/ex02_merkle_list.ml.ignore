module rec Universe :
  (Snarky_universe.Intf.S with type Impl.prover_state = Prover_state.t) =
  Snarky_universe.Default (Prover_state) ()

and Prover_state : sig
  type t = Universe.Hash.Constant.t array [@@deriving yojson]

  val length : int

  val typ : (Universe.Hash.t array, t) Universe.Impl.Typ.t
end = struct
  open! Universe.Impl
  open! Universe

  type t = Hash.Constant.t array [@@deriving yojson]

  let length = 32

  let typ = Typ.array ~length Hash.typ
end

open! Universe.Impl
open! Universe

let input = InputSpec.[(module Field); (module Field)]

let main supposed_root x () =
  let path =
    exists Prover_state.typ ~compute:(fun () -> As_prover.get_state ())
  in
  let actual_root =
    Array.fold_left (fun acc h -> Hash.hash [|h; acc|]) x path
  in
  Hash.assertEqual actual_root supposed_root

let () = InputSpec.run_main input Prover_state.of_yojson main
