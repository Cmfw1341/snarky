let x = 15
let y = x
let z = x
let a = 15
let b = x; y
let c = x; y
let d x = x
let e = let e = let e = x in e in e
let f = let f x = x in let g = (d f) f in g f f f
let (g : '_a95 -> '_a96) = let (f : '_a87 -> '_a87) = fun x -> x in f
let (h : (int -> '_a111) -> '_a126) =
  fun (f : int -> '_a111) ->
    let (i : '_a111) = f 15 in let (j : '_a111) = f i in j
let (i : ('b -> 'b) -> 'b -> 'b) = fun (f : 'b -> 'b) -> f
let (j : '_a160) =
  let (f : '_a140 -> '_a140) = fun (x : '_a140) -> x in f f f
let (k : (int -> int) -> int -> int) =
  fun (f : int -> int) -> fun (x : int) -> f 15; f x
let l = (1, 2, 3)
let m = ((1, 2, 3), 4, 5, (6, (7, 8)))
let n = ((), (), ())
let (o :
  ((int * int * (int * int * (int * int * ()))) ->
     (int * int * (int * int * (int * int * ()))) ->
       (int * int * (int * int * (int * int * ()))))
    -> (int * int * (int * int * (int * int * ()))))
  =
  fun
    (f :
      (int * int * (int * int * (int * int * ()))) ->
        (int * int * (int * int * (int * int * ()))) ->
          (int * int * (int * int * (int * int * ()))))
    ->
    let x = (1, 2, (1, 2, (1, 2, ()))) in
    let y = (3, 4, (3, 4, (3, 4, ()))) in let z = f x y in f x z
type nonrec int' = int
let (p : int -> int') = fun (x : int) -> x
type nonrec record = {
  one: int ;
  two: int' ;
  three: int }
let (record : record) = { one = 20; two = 25; three = 30 }
let (one : int') = record.one
let (two : (record -> record) -> record) =
  fun (f : record -> record) ->
    {
      one = ({ one = 1; two = 2; three = 3 }.one);
      two = ((f x).two);
      three = 3
    }
