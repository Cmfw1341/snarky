type int' = int;

type record = { one : int, two : int', three : int };

let a = {
  let f = fun (x) => {x;};
  switch (f) {
  | x => x 15
  | _ => 12
  };
};

let b = fun ({one: one'; two} : record) => {
  let not_one = switch (one') {
  | 0 => 1
  | _ => 0
  };
  let two = switch (two) {
  | 1 | 2 | 3 | 4 => 0
  | (5 | 6) | (7 | 8) => 1
  | x => x
  };
  (not_one, two);
};

let c = fun (record) => {
  switch (record) {
  | { one: 1; _ } => record
  | { two: 2; three } => {one: 1, two: 2, three: three}
  | _ => {one: 1, two: 2, three: 3}
  };
};

let d = fun (x) => {
  switch (x) {
  | (1 | 2 | 3, _) => 1
  | (x, ({one: 1; two}|{three: two}, f)) => f two x
  | (_, (_, f)) => f 94 84
  };
};
