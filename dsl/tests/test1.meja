let x = 15;

let y = x;

let z = (x);

let a = (15);

let b = {x; y;};

let c = fun (x) => { x; };

let d = {let e = c};

let e = {let e = {let e = x; e}; e;};

let f = {
  let f = fun (x) => { x; };
  let g = (c f) f;
  g f f f;
};

let g : _ -> _ = {
  let f : _ -> _ = fun (x) => { x; };
  f;
};

let h : _ = fun (f : _ -> _) => {
  let i : _ = f 15;
  let j : _ = f i;
  j;
};

let i : 'a -> 'a = fun (f : 'b -> 'b) => {
  f;
};

let j : _ = {
  let f : _ = fun (x : 'a) => {x;};
  f f f;
};

let k : _ = fun (f : 'b -> 'b, x : int) => {
  f 15;
  f x;
};

let l = 1, 2, 3;

let m = ((1, 2, 3), 4, 5, (6, (7, 8)));

let n = ((), (), ());

let o : _ = fun (f : 'a -> 'a -> 'a) => {
  let x = (1, 2, (1, 2, (1, 2, ())));
  let y = (3, 4, (3, 4, (3, 4, ())));
  let z = f x y;
  f x z;
};

type int' = int;

let p : int -> int' = fun (x : int) => {
  x;
};

type record = { one : int, two : int', three : int };

let record : record = { one: 20, two: 25, three: 30 };

let one : int' = record.one;

let two : _ = fun (f : record -> record) => {
  {one: {one: 1, two: 2, three: 3}.one, two: (f x).two, three: 3};
};

let q : _ = {
  let f = fun (x) => {x;};
  switch (f) {
  | x => x 15
  | _ => 12
  };
};

let r : _ = fun ({one: one'; two} : record) => {
  let not_one = switch (one') {
  | 0 => 1
  | _ => 0
  };
  let two = switch (two) {
  | 1 | 2 | 3 | 4 => 0
  | (5 | 6) | (7 | 8) => 1
  | x => x
  };
  (not_one, two);
};

let s : _ = fun (record) => {
  switch (record) {
  | { one: 1; _ } => record
  | { two: 2; three } => {one: 1, two: 2, three: three}
  | _ => {one: 1, two: 2, three: 3}
  };
};

let t : _ = fun (x) => {
  switch (x) {
  | (1 | 2 | 3, _) => 1
  | (x, ({one: 1; two}|{three: two}, f)) => f two x
  | (_, (_, f)) => f 94 84
  };
};

type variant = A | B | C;

type variant2 = A(int) | B(unit, int) | C(variant2);
