let x = 15;

let y = x;

let z = (x);

let a = (15);

let b = (x; y);

let c = {x; y;};

let d = fun (x) => { x; };

let e = let e = let e = x; e; e;

let f =
  let f = fun (x) => { x; };
  let g = (d f) f;
  g f f f;

let g : _ -> _ =
  let f : _ -> _ = fun (x) => { x; };
  f;

let h : _ = fun (f : _ -> _) => {
  let i : _ = f 15;
  let j : _ = f i;
  j;
};

let i : 'a -> 'a = fun (f : 'b -> 'b) => {
  f;
};

let j : _ =
  let f : _ = fun (x : 'a) => {x;};
  f f f;

let k : _ = fun (f : 'b -> 'b, x : int) => {
  f 15;
  f x;
};

let l = 1, 2, 3;

let m = ((1, 2, 3), 4, 5, (6, (7, 8)));

let n = ((), (), ());

let o : _ = fun (f : 'a -> 'a -> 'a) => {
  let x = (1, 2, (1, 2, (1, 2, ())));
  let y = (3, 4, (3, 4, (3, 4, ())));
  let z = f x y;
  f x z;
};

type int' = int;

let p : int -> int' = fun (x : int) => {
  x;
};

type record = { one : int, two : int', three : int };

let record : record = { one: 20, two: 25, three: 30 };
