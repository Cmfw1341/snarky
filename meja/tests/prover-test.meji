module type P = { Prover {let x : int;  let f : bool -> bool;  }  };

module P : { Prover {let x : int;  let f : _ -> _;  }  };

let f : _ -> _;

Prover {let g : _ -> _;  }

let h : _ -> _;

let i : unit -> opaque(int);

type either('a, 'b) = Fst('a) | Snd('b);

let j : _ -> _ -> opaque(either(_, int));

let k : field -> opaque(either(_, int));

let l : boolean -> boolean -> opaque(either(_, int));


